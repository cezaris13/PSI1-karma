@page "/editcharityevent/{Id:guid}"
@using Karma.Models
@using Karma.Data
@using Z.EntityFramework.Plus;
@using Microsoft.EntityFrameworkCore;
@using System.Security.Claims
@inject IJSRuntime m_jsRuntime
@inject AuthenticationStateProvider GetAuthenticationStateAsync

@using System.Text.RegularExpressions;

@if (CharityEvent.ManagerId == CurrentUserId)
{
    <h1 class="mat">Edit charity event</h1>
    <MatTextField @bind-Value="@CharityEvent.Name" @oninput="@((e) => { CharityEvent.Name = (string)e.Value; })" Label="Event Title" Outlined="true"></MatTextField>
    <br>
    <MatTextField @bind-Value="@CharityEvent.Description" @oninput="@((e) => { CharityEvent.Description = (string)e.Value; })" Label="Event Description" Outlined="true"></MatTextField>
    <br>
    <br>
    <MatTextField @bind-Value="@FilterValue" OnInput="@(e => FilterValue = e.Value.ToString())" Label="Search" Icon="search" IconTrailing="true"></MatTextField>
    <MatAccordion Multi="true">
        <MatExpansionPanel @bind-Expanded="@panelOpenState1">
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>Volunteers that are working on this event</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <MatList>
                    @foreach (var volunteer in GetVolunteersInThisEvent())
                    {
                        nameSurname = volunteer.Name + " " + volunteer.Surname;
                        surnameName = volunteer.Surname + " " + volunteer.Name;
                        var regex = new Regex($"(.*){FilterValue}(.*)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                        var matches = regex.Matches(nameSurname + surnameName);
                        @if (matches.Count > 0)
                        {
                            <MatListItem display: inline-block; width: 100%;>
                                <div>
                                    <div style="float:left">
                                        @volunteer.Name
                                        @volunteer.Surname
                                    </div>
                                    <div style="float:right">
                                        <MatButton Outlined="true" @onclick="() => RemoveVolunteerFromEvent(volunteer.Id)">Remove</MatButton>

                                    </div>
                                </div>
                            </MatListItem>
                        }
                    }
                </MatList>
            </MatExpansionPanelDetails>
        </MatExpansionPanel>

        <MatExpansionPanel @bind-Expanded="@panelOpenState2">
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>Volunteers that could be added to this event</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <MatList>
                    @foreach (var volunteer in GetVolunteersNotInThisEvent())
                    {
                        var regex = new Regex($"(.*){FilterValue}(.*)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                        var matches = regex.Matches(volunteer.Name + volunteer.Surname);
                        @if (matches.Count > 0)
                        {
                            <MatListItem display: inline-block; width: 100%;>
                                <div style="float:left">
                                    @volunteer.Name
                                    @volunteer.Surname
                                </div>
                                <div style="float:right">
                                    <MatButton Outlined="true" @onclick="() => AddVolunteerToEvent(volunteer.Id)">Add</MatButton>
                                </div>
                            </MatListItem>
                        }
                    }
                </MatList>
            </MatExpansionPanelDetails>
        </MatExpansionPanel>
    </MatAccordion>
    <MatButton Outlined="true" class="btn btn-primary" @onclick="UpdateEvent">Update event</MatButton>
    <MatButton Raised="true" class="btn btn-primary" @onclick="DeleteEvent">Delete event</MatButton>
}

@code
{
    [Parameter]
    public Guid Id { get; set; }
    KarmaContext KarmaContext = new KarmaContext();
    public CharityEvent CharityEvent;
    private string FilterValue { get; set; } = "";
    private String nameSurname { get; set; } = "";
    private String surnameName { get; set; } = "";
    bool panelOpenState1 = true;
    bool panelOpenState2 = true;

    string CurrentUserId { get; set; }

    private void UpdateEvent()
    {
        KarmaContext.Events.Update(CharityEvent);
        KarmaContext.SaveChanges();
        m_uriHelper.NavigateTo("");
        m_notificationPopup.ShowMessage("The event has been updated");
    }

    private void DeleteEvent()
    {
        KarmaContext.Events.Where(x => x.Id == Id).Delete();
        KarmaContext.SaveChanges();
        m_uriHelper.NavigateTo("");
        m_notificationPopup.ShowMessage("The event has been deleted");
    }

    protected override void OnInitialized()
    {
        CharityEvent = KarmaContext.Events.Include(p => p.Volunteers).Where(p => p.Id == Id).FirstOrDefault();
        var principal = m_httpContextAccessor.HttpContext.User;
        CurrentUserId = principal.FindFirstValue(ClaimTypes.NameIdentifier);
    }

    public IEnumerable<IVolunteer> GetVolunteersInThisEvent()
    {
        return KarmaContext.Events.Include(p => p.Volunteers).Where(p => p.Id == Id).Select(p => p.Volunteers).SelectMany(p => p);
    }

    public IEnumerable<IVolunteer> GetVolunteersNotInThisEvent()
    {
        return KarmaContext.Volunteers.Include(p => p.Events).Where(p => !p.Events.Contains(CharityEvent));
    }

    private void AddVolunteerToEvent(Guid id)
    {
        CharityEvent.Volunteers.Add(KarmaContext.Volunteers.Where(p => p.Id == id).FirstOrDefault());
        KarmaContext.SaveChanges();
    }

    private void RemoveVolunteerFromEvent(Guid id)
    {
        CharityEvent.Volunteers.Remove(KarmaContext.Volunteers.Where(p => p.Id == id).FirstOrDefault());
        KarmaContext.SaveChanges();
    }
}
