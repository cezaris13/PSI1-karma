@page "/editcharityevent/{Id:guid}"
@using Karma.Models
@using Karma.Data
@using Z.EntityFramework.Plus;
@inject IJSRuntime m_jsRuntime

@if (m_httpContextAccessor.HttpContext.User.Identity.IsAuthenticated)
{
    <h1>Edit charity event</h1>

    <label for="fname">Event title:</label>
    <input type="text" @bind="@CharityEvent.Name" @oninput="@((e) => { CharityEvent.Name = (string)e.Value; })" />
    <br>
    <br>
    <label for="fname">Event description:</label>
    <input type="text" @bind="@CharityEvent.Description" @oninput="@((e) => { CharityEvent.Description = (string)e.Value; })" />
    <br>
    <br>
    <button class="btn btn-primary" @onclick="UpdateEvent">Update event</button>
    <button class="btn btn-primary" @onclick="DeleteEvent">Delete event</button>
}
@code
{
    [Parameter]
    public Guid Id { get; set; }
    KarmaContext KarmaContext = new KarmaContext();
    public CharityEvent CharityEvent;


    private async Task UpdateEvent()
    {
        KarmaContext.Events.Update(CharityEvent);
        KarmaContext.SaveChanges();
        m_uriHelper.NavigateTo("");
        await m_jsRuntime.InvokeVoidAsync("alert", "The event has been updated");
    }

    private async Task DeleteEvent()
    {
        KarmaContext.Events.Where(x => x.Id == Id).Delete();
        KarmaContext.SaveChanges();
        m_uriHelper.NavigateTo("");
        await m_jsRuntime.InvokeVoidAsync("alert", "The event has been deleted");
    }

    protected override void OnInitialized()
    {
        CharityEvent = KarmaContext.Events.Where(p => p.Id == Id).FirstOrDefault();
    }
}
