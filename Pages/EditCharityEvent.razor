@page "/editcharityevent/{Id:guid}"
@using Karma.Models
@using System.Text.RegularExpressions;

<head>
    <link href="css/site.css" rel="stylesheet" />
</head>

@if (charityEvent.ManagerId == CurrentUserId)
{
    <div class="container leftAlign" style="width: 20%">
        <h1 class="mat">Edit charity event</h1>
        <MatTextField @bind-Value="@charityEvent.Name" @oninput="@((e) => { charityEvent.Name = (string)e.Value; })" Label="Event Title" Outlined="true" Class="element"></MatTextField>
        <MatTextField @bind-Value="@charityEvent.Description" @oninput="@((e) => { charityEvent.Description = (string)e.Value; })" Label="Event Description" Outlined="true" Class="element"></MatTextField>
        <MatTextField @bind-Value="@charityEvent.Address" @oninput="@((e) => { charityEvent.Address = (string)e.Value; })" Label="Event Location" Outlined="true" Class="element"></MatTextField>
        <MatTextField type="number" min="0" max="1000000" OnFocus="@OnFocusHandler" OnFocusOut="OnFocusOutHandler" @bind-Value="@VolunteerCount" Label="Maximum number of volunteers" Outlined="true" Class="element"></MatTextField>
        <div style="color:red" class="element">@errorMessage</div>
        <MatTextField @bind-Value="@charityEvent.PhotoPath" @oninput="@((e) => { charityEvent.PhotoPath = (string)e.Value; })" Label="Picture URL" Outlined="true" Class="element"></MatTextField>
        <MatTextField @bind-Value="@filterValue" OnInput="@(e => filterValue = e.Value.ToString())" Label="Search" Icon="search" IconTrailing="true" Class="element"></MatTextField>
    </div>
    <MatAccordion Multi="true">
        <MatExpansionPanel @bind-Expanded="@panelOpenState1">
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>Volunteers that are working on this event</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <MatList>
                    @foreach (var volunteer in GetVolunteersInThisEvent())
                    {
                        var nameSurname = volunteer.Name + " " + volunteer.Surname;
                        var surnameName = volunteer.Surname + " " + volunteer.Name;
                        var regex = new Regex($"(.*){filterValue}(.*)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                        var matches = regex.Matches(nameSurname + surnameName);
                        @if (matches.Count > 0)
                        {
                            <MatListItem style=" display: inline-block; width: 100%;">
                                <div>
                                    <div style="float:left">
                                        @volunteer.Name
                                        @volunteer.Surname
                                        (
                                        @GetNumberOfEquipmentOfThisVolunteer(volunteer.Id)
                                        )
                                    </div>
                                    <div style="float:right">
                                        <MatButton Outlined="true" @onclick="() => RemoveVolunteerFromEvent(volunteer.Id)">Remove</MatButton>

                                    </div>
                                </div>
                            </MatListItem>
                        }
                    }
                </MatList>
            </MatExpansionPanelDetails>
        </MatExpansionPanel>

        <MatExpansionPanel @bind-Expanded="@panelOpenState2">
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>Volunteers that could be added to this event</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <MatList>
                    @foreach (var volunteer in GetVolunteersNotInThisEvent())
                    {
                        var regex = new Regex($"(.*){filterValue}(.*)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                        var matches = regex.Matches(volunteer.Name + volunteer.Surname);
                        @if (matches.Count > 0)
                        {
                            <MatListItem style="display: inline-block; width: 100%;">
                                <div style="float:left">
                                    @volunteer.Name
                                    @volunteer.Surname
                                    (
                                    @GetNumberOfEquipmentOfThisVolunteer(volunteer.Id)
                                    )
                                </div>
                                <div style="float:right">
                                    @if (charityEvent.MaxVolunteers >= 0 && charityEvent.MaxVolunteers > charityEvent.Volunteers.Count)
                                    {
                                        <MatButton Outlined="true" @onclick="() => AddVolunteerToEvent(volunteer.Id)">Add</MatButton>
                                    }
                                </div>
                            </MatListItem>
                        }
                    }
                </MatList>
            </MatExpansionPanelDetails>
        </MatExpansionPanel>
    </MatAccordion>
    @if (charityEvent.MaxVolunteers >= 0 && charityEvent.MaxVolunteers >= charityEvent.Volunteers.Count)
    {
        <MatButton Outlined="true" class="btn btn-primary" @onclick="UpdateEvent">Update event</MatButton>
    }
    <MatButton Raised="true" class="btn btn-primary" @onclick="DeleteEvent">Delete event</MatButton>
}
