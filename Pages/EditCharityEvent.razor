@page "/editcharityevent/{Id:guid}"
@using Karma.Models
@using Karma.Data
@using Z.EntityFramework.Plus;
@inject IJSRuntime m_jsRuntime
@using Microsoft.EntityFrameworkCore;
@inject AuthenticationStateProvider GetAuthenticationStateAsync

@if (m_httpContextAccessor.HttpContext.User.Identity.IsAuthenticated)
{
    if (CharityEvent.ManagedByUser == CurrentUserName)
    {
        <h1>Edit charity event</h1>

        <label for="fname">Event title:</label>
        <input type="text" @bind="@CharityEvent.Name" @oninput="@((e) => { CharityEvent.Name = (string)e.Value; })" />
        <br>
        <br>
        <label for="fname">Event description:</label>
        <input type="text" @bind="@CharityEvent.Description" @oninput="@((e) => { CharityEvent.Description = (string)e.Value; })" />
        <br>
        <br>
        <tbody>
            <tr>
                <th>Volunteers that are working on this event</th>
            </tr>
            <tr>
                @foreach (var volunteer in GetVolunteersInThisEvent())
                {
                    <li>
                        @volunteer.Name
                        @volunteer.Surname
                        <div align="left">
                            <button class="btn btn-primary" @onclick="() => RemoveVolunteerFromEvent(volunteer.Id)">Remove</button>
                        </div>
                    </li>
                }
            </tr>
        </tbody>
        <br>
        <br>
        <tbody>
            <tr>
                <th>Volunteers that could be added to this event</th>
                <th></th>
            </tr>
            <tr>
                @foreach (var volunteer in GetVolunteersNotInThisEvent())
                {
                    <li>
                        @volunteer.Name
                        @volunteer.Surname
                        <div align="left">
                            <button class="btn btn-primary" @onclick="() => AddVolunteerToEvent(volunteer.Id)">Add</button>
                        </div>
                    </li>
                }
            </tr>
        </tbody>
        <br>
        <br>
        <button class="btn btn-primary" @onclick="UpdateEvent">Update event</button>
        <button class="btn btn-primary" @onclick="DeleteEvent">Delete event</button>
    }
    else
    {
        <h1>Cannot access this event</h1>
    }
}
@code
{
    [Parameter]
    public Guid Id { get; set; }
    KarmaContext KarmaContext = new KarmaContext();
    public CharityEvent CharityEvent;
    string CurrentUserName { get; set; }

    private async Task UpdateEvent()
    {
        KarmaContext.Events.Update(CharityEvent);
        KarmaContext.SaveChanges();
        m_uriHelper.NavigateTo("");
        await m_jsRuntime.InvokeVoidAsync("alert", "The event has been updated");
    }

    private async Task DeleteEvent()
    {
        KarmaContext.Events.Where(x => x.Id == Id).Delete();
        KarmaContext.SaveChanges();
        m_uriHelper.NavigateTo("");
        await m_jsRuntime.InvokeVoidAsync("alert", "The event has been deleted");
    }

    protected override async Task OnInitializedAsync()
    {
        CharityEvent = KarmaContext.Events.Include(p => p.Volunteers).Where(p => p.Id == Id).FirstOrDefault();
        var user = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        CurrentUserName = user.User.Identity.Name;
    }

    public IEnumerable<IVolunteer> GetVolunteersInThisEvent()
    {
        return KarmaContext.Events.Include(p => p.Volunteers).Where(p => p.Id == Id).Select(p => p.Volunteers).SelectMany(p => p);
    }

    public IEnumerable<IVolunteer> GetVolunteersNotInThisEvent()
    {
        return KarmaContext.Volunteers.Include(p => p.Events).Where(p => !p.Events.Contains(CharityEvent));
    }

    private void AddVolunteerToEvent(Guid id)
    {
        CharityEvent.Volunteers.Add(KarmaContext.Volunteers.Where(p => p.Id == id).FirstOrDefault());
        KarmaContext.SaveChanges();
    }

    private void RemoveVolunteerFromEvent(Guid id)
    {
        CharityEvent.Volunteers.Remove(KarmaContext.Volunteers.Where(p => p.Id == id).FirstOrDefault());
        KarmaContext.SaveChanges();
    }
}
