@page "/registration"
@using Karma.Models
@using Microsoft.EntityFrameworkCore;
@using System.Text.RegularExpressions;
@using System.Linq;
@using System.Security.Claims
@attribute [Microsoft.AspNetCore.Authorization.AllowAnonymous]
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IJSRuntime m_jsRuntime


<head>
    <link href="css/site.css" rel="stylesheet" />
</head>

<h1 class="mat">Volunteers</h1>
<p>Want to join awesome volunteer team? Leave us your details and we will contact you within 3 working days.</p>
<div class="box containter">
    <div class="centerContainer">
        <MatTextField @bind-Value="@Name" @oninput="@((e) => { Name = (string)e.Value; })" Label=" Name" Outlined="false" Class="element"></MatTextField>
        <MatTextField @bind-Value="@Surname" @oninput="@((e) => { Surname = (string)e.Value; })" Label=" Surname" Outlined="false" Class="element"></MatTextField>
        <MatTextField @bind-Value="@PhoneNumber" @oninput="@((e) => { PhoneNumber = (string)e.Value; })" Label=" Phone Number" Outlined="false" Class="element"></MatTextField>
        <MatButton Raised="true" class="btn btn-primary element" @onclick="CreatePendingVolunteer">Register</MatButton>
    </div>
</div>

@code
{
    private String Name { get; set; } = "";
    private String Surname { get; set; } = "";
    private String PhoneNumber { get; set; } = "";
    KarmaContext KarmaContext = new KarmaContext();
    private String nameSurname { get; set; } = "";
    private String surnameName { get; set; } = "";
    string CurrentUserId { get; set; }

    public IEnumerable<IVolunteer> GetVolunteers()
    {
        return KarmaContext.Volunteers.Include(x => x.Events);
    }

    public void NavigateToIndividualEvent(Guid id)
    {
        m_uriHelper.NavigateTo($"event/{id}");
    }

    public void NavigateToAddVolunteer()
    {
        m_uriHelper.NavigateTo("addvolunteer");
    }

    private void CreatePendingVolunteer()
    {
        var volunteer = new PendingVolunteer(Name, Surname, PhoneNumber, Guid.NewGuid());
        KarmaContext.PendingVolunteers.Add(volunteer);
        KarmaContext.SaveChanges();
        m_notifactionTransmitter.ShowMessage("Registration Succesful", MatToastType.Success);
        Name = "";
        Surname = "";
        PhoneNumber = "";
    }

    public void NavigateToManageVolunteer(Guid id)
    {
        m_uriHelper.NavigateTo($"volunteer/{id}");
    }

    protected override void OnInitialized()
    {
        var principal = m_httpContextAccessor.HttpContext.User;
        CurrentUserId = principal.FindFirstValue(ClaimTypes.NameIdentifier);
    }
}
