@page "/addcharityevent"
@using Karma.Models
@inject IJSRuntime m_jsRuntime
@using System.Security.Claims
@inject AuthenticationStateProvider GetAuthenticationStateAsync

<h1 class="mat">Add charity event</h1>

<MatTextField @bind-Value="@EventTitle" @oninput="@((e) => { EventTitle = (string)e.Value; })" Label="Event Title" Outlined="true"></MatTextField>
<br>
<br>
<MatTextField @bind-Value="@EventDescription" @oninput="@((e) => { EventDescription = (string)e.Value; })" Label="Event Description" Outlined="true"></MatTextField>
<br>
<br>
<MatTextField @bind-Value="@EventAddress" @oninput="@((e) => { EventAddress = (string)e.Value; })" Label="Event Location" Outlined="true"></MatTextField>
<br>
<br>
<MatButton Raised="true" class="btn btn-primary" @onclick="AddEvent">Add event</MatButton>

@code
{
    KarmaContext KarmaContext = new KarmaContext();
    string EventTitle { get; set; }
    string EventDescription { get; set; }
    string CurrentUserId { get; set; }
    string EventAddress { get; set; }

    protected override void OnInitialized()
    {
        var principal = m_httpContextAccessor.HttpContext.User;
        CurrentUserId = principal.FindFirstValue(ClaimTypes.NameIdentifier);
    }

    private void AddEvent()
    {
        var ev = new CharityEvent(EventTitle, EventDescription, Guid.NewGuid(), CurrentUserId, EventAddress);
        if (ObjectChecker.IsAnyNullOrEmpty(ev))
        {
            m_notifactionTransmitter.ShowMessage("There are some empty fields", MatToastType.Danger);
        }
        else
        {
            KarmaContext.Events.Add(ev);
            KarmaContext.SaveChanges();
            m_uriHelper.NavigateTo("");
            m_notifactionTransmitter.ShowMessage("The event has been created", MatToastType.Success);
        }
    }
}
