@page "/addcharityevent"
@using Karma.Models
@using Karma.Data
@inject IJSRuntime m_jsRuntime
@using System.Security.Claims
@inject AuthenticationStateProvider GetAuthenticationStateAsync

<h1 class="mat">Add charity event</h1>

@if (m_httpContextAccessor.HttpContext.User.Identity.IsAuthenticated)
{
    <MatTextField @bind-Value="@EventTitle"  @oninput="@((e) => { EventTitle = (string)e.Value; })" Label="Event Title" Outlined="true"></MatTextField>
    <br>
    <br>
    <MatTextField @bind-Value="@EventDescription"  @oninput="@((e) => { EventDescription = (string)e.Value; })" Label="Event Description" Outlined="true"></MatTextField>
    <br>
    <br>
    <MatButton Raised="true" class="btn btn-primary" @onclick="AddEvent">Add event</MatButton>
}
else
{
    <label for="fname">Please LogIn:</label>
}
@code
{
    KarmaContext KarmaContext = new KarmaContext();
    string EventTitle { get; set; }
    string EventDescription { get; set; }
    string CurrentUserId { get; set; }

    protected override void OnInitialized()
    {
        var principal = m_httpContextAccessor.HttpContext.User;
        CurrentUserId = principal.FindFirstValue(ClaimTypes.NameIdentifier);
    }

    private void AddEvent()
    {
        var ev = new CharityEvent(EventTitle, EventDescription, Guid.NewGuid(), CurrentUserId);
        KarmaContext.Events.Add(ev);
        KarmaContext.SaveChanges();
        m_uriHelper.NavigateTo("");
        m_notificationPopup.ShowMessage("The event has been created");
    }
}
