@page "/volunteers"
@using Karma.Models
@using Microsoft.EntityFrameworkCore;
@using System.Text.RegularExpressions;
@using System.Linq;
@using System.Security.Claims
@inject IJSRuntime m_jsRuntime
@inject AuthenticationStateProvider GetAuthenticationStateAsync
<h1 class="mat">Volunteers</h1>

<p>
    Here you can find the list of volunteers working on various projects.
    <br />
    <MatButton Raised="true" class="btn btn-primary" @onclick="NavigateToAddVolunteer">Add a new volunteer</MatButton>
</p>
<MatTextField @bind-Value="@FilterValue" OnInput="@(e => FilterValue = e.Value.ToString())" Label="Search Volunteers" Icon="search" IconTrailing="true"></MatTextField>
<table class="table">
    <tbody>
        <tr>
            <th>Name</th>
            <th>Surname</th>
            <th>Events</th>
            <th>Actions</th>
        </tr>
        @foreach (var volunteer in GetVolunteers())
        {
            nameSurname = volunteer.Name + " " + volunteer.Surname;
            surnameName = volunteer.Surname + " " + volunteer.Name;
            var regex = new Regex($"(.*){FilterValue}(.*)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            var matches = regex.Matches(nameSurname + surnameName);
            @if (matches.Count > 0)
            {
                <tr>
                    <td>@volunteer.Name</td>
                    <td>@volunteer.Surname</td>
                    <td>
                        @if (volunteer.Events != null)
                        {

                            @foreach (var karmaEvent in volunteer.Events)
                            {
                                <div @onclick="() => NavigateToIndividualEvent(karmaEvent.Id)">
                                    @karmaEvent.Name
                                </div>
                            }
                        }

                    </td>
                    <td>
                        <MatButton class="btn btn-primary" Outlined="true" @onclick="() => NavigateToManageVolunteer(volunteer.Id)">Manage volunteer</MatButton>
                        @if (!volunteer.Events.Where(p => p.ManagerId != CurrentUserId).Any())
                        {
                            <MatButton Raised="true" @onclick="() => RemoveVolunteer(volunteer.Id)">Remove the volunteer</MatButton>
                        }
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code
{
    private String FilterValue { get; set; } = "";
    KarmaContext KarmaContext = new KarmaContext();
    private String nameSurname { get; set; } = "";
    private String surnameName { get; set; } = "";
    string CurrentUserId { get; set; }

    public IEnumerable<IVolunteer> GetVolunteers()
    {
        return KarmaContext.Volunteers.Include(x => x.Events);
    }

    public void NavigateToIndividualEvent(Guid id)
    {
        m_uriHelper.NavigateTo($"event/{id}");
    }

    public void NavigateToAddVolunteer()
    {
        m_uriHelper.NavigateTo("addvolunteer");
    }

    private void RemoveVolunteer(Guid id)
    {
        KarmaContext.Volunteers.Where(x => x.Id == id).DeleteFromQuery();
        KarmaContext.SaveChanges();
        m_notifactionTransmitter.ShowMessage("The volunteer has been removed");
    }

    public void NavigateToManageVolunteer(Guid id)
    {
        m_uriHelper.NavigateTo($"volunteer/{id}");
    }

    protected override void OnInitialized()
    {
        var principal = m_httpContextAccessor.HttpContext.User;
        CurrentUserId = principal.FindFirstValue(ClaimTypes.NameIdentifier);
    }
}
