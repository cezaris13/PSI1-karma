@page "/event/{Id:guid}"
@using System.Linq
@using Karma.Models
@using Microsoft.EntityFrameworkCore;
@using System.Security.Claims
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IWeatherForecast m_weatherForecast
@inject IJSRuntime jsRuntime
@using OpenCage.Geocode
@inject IGeocoder m_geocoder

@if (charityEvent != null)
{
    <h1 class="mat">@charityEvent.Name</h1>

    <h2 class="mat">@charityEvent.Description</h2>

    <h3 class="mat">@charityEvent.State.ToString()</h3>

    <h3 class="mat">@charityEvent.Address</h3>

    <h3 class="mat">@WeatherForecast</h3>

    <div id="mapid" style="height:500px;width:500px"></div>

    if (CurrentUserId == charityEvent.ManagerId)
    {
        <MatButton Raised="true" class="btn btn-primary" @onclick="NavigateToEditEvent">Update event</MatButton>
    }
    <br>
    <br>
    <div style="float:left; width:40%">
        <p>Event volunteers:</p>
        <ol>
            @foreach (var volunteer in GetVolunteers())
            {
                <li>@volunteer</li>
            }
        </ol>
    </div>
    <div style="float:right; width:40%">
        <p>Event equipment:</p>
        <ol>
            @foreach (var equipment in GetEquipment())
            {
                <li>@equipment</li>
            }
        </ol>
    </div>
}
else
{
    <h1 class="mat">Sorry,but this event was not found</h1>
}

@code
{
    [Parameter]
    public Guid Id { get; set; }
    private CharityEvent charityEvent;
    KarmaContext KarmaContext = new KarmaContext();
    string CurrentUserId { get; set; }
    string WeatherForecast { get; set; } = "loading weather forecast";

    protected override async Task OnInitializedAsync()
    {
        charityEvent = KarmaContext.Events.Where(p => p.Id == Id).FirstOrDefault();
        var principal = m_httpContextAccessor.HttpContext.User;
        CurrentUserId = principal.FindFirstValue(ClaimTypes.NameIdentifier);
        try
        {
            WeatherForecast = await m_weatherForecast.GetWeather(charityEvent.Address);
            var location = m_geocoder.Geocode(charityEvent.Address);
            var coords = location.Results[0].Geometry;
            await jsRuntime.InvokeVoidAsync("GetMap", coords.Latitude, coords.Longitude);
        }
        catch (InvalidAddressException ex)
        {
            m_notifactionTransmitter.ShowMessage("could not provide weather forecast:" + ex.Message, MatToastType.Danger);
            WeatherForecast = "failed";
        }
    }

    public void NavigateToEditEvent()
    {
        m_uriHelper.NavigateTo($"editcharityevent/{Id}");
    }

    public IEnumerable<string> GetVolunteers()
    {
        return KarmaContext.Events.Include(p => p.Volunteers).Where(p => p.Id == Id).Select(p => p.Volunteers).SelectMany(p => p).Select(p => $"{p.Name} {p.Surname}");
    }

    public IEnumerable<string> GetEquipment()
    {
        var eventEquipment = new List<string>();
        foreach (var equipment in KarmaContext.SpecialEquipment.Include(p => p.Owner))
        {
            foreach (var volunteer in KarmaContext.Events.Include(p => p.Volunteers).Where(p => p.Id == Id).Select(p => p.Volunteers).SelectMany(p => p))
            {
                if (equipment.Owner.Id == volunteer.Id)
                {
                    eventEquipment.Add(equipment.Name);
                }
            }
        }
        return eventEquipment;
    }
}
