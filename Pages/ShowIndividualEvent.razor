@page "/event/{Id:guid}"
@using System.Linq
@using Karma.Models
@using Microsoft.EntityFrameworkCore;
@using System.Security.Claims
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IWeatherForecast m_weatherForecast

@if (charityEvent != null)
{
    <h1 class="mat">@charityEvent.Name</h1>

    <h2 class="mat">@charityEvent.Description</h2>

    <h3 class="mat">@charityEvent.State.ToString()</h3>

    <h3 class="mat">@charityEvent.Location</h3>

    <h3 class="mat">@WeatherForecast</h3>

    <ol>
        @foreach (var volunteer in GetVolunteers())
        {
            <li>@volunteer</li>
        }
    </ol>
    if (CurrentUserId == charityEvent.ManagerId)
    {
        <MatButton Raised="true" class="btn btn-primary" @onclick="NavigateToEditEvent">Update event</MatButton>
    }
}
else
{
    <h1 class="mat">Sorry,but this event was not found</h1>
}

@code
{
    [Parameter]
    public Guid Id { get; set; }
    private CharityEvent charityEvent;
    KarmaContext KarmaContext = new KarmaContext();
    string CurrentUserId { get; set; }
    string WeatherForecast { get; set; } = "loading weather forecast";

    protected override async Task OnInitializedAsync()
    {
        charityEvent = KarmaContext.Events.Where(p => p.Id == Id).FirstOrDefault();
        var principal = m_httpContextAccessor.HttpContext.User;
        CurrentUserId = principal.FindFirstValue(ClaimTypes.NameIdentifier);
        WeatherForecast = await m_weatherForecast.GetWeather(charityEvent.Location);
    }

    public void NavigateToEditEvent()
    {
        m_uriHelper.NavigateTo($"editcharityevent/{Id}");
    }

    public IEnumerable<string> GetVolunteers()
    {
        return KarmaContext.Events.Include(p => p.Volunteers).Where(p => p.Id == Id).Select(p => p.Volunteers).SelectMany(p => p).Select(p => $"{p.Name} {p.Surname}");
    }
}
