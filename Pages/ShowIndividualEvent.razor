@page "/event/{Id:guid}"
@using System.Linq
@using Karma.Models
@using Microsoft.EntityFrameworkCore;
@using System.Security.Claims
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IWeatherForecast m_weatherForecast
@inject IJSRuntime jsRuntime
@using OpenCage.Geocode
@using System.Threading
@inject IGeocoder m_geocoder

@if (charityEvent != null)
{
    <h1 class="mat">@LoadingMessage</h1>

    <h1 class="mat">@charityEvent.Name</h1>

    <h2 class="mat">@charityEvent.Description</h2>

    <h3 class="mat">@charityEvent.State.ToString()</h3>

    <h3 class="mat">@charityEvent.Address</h3>

    <h3 class="mat">@WeatherForecast</h3>

    <h3 class="mat-subtitle1">Participants @CurrentParticipants / @NeededParticipants</h3>
    <MatProgressBar Progress=@ParticipantsProgress></MatProgressBar>

    <div id="mapid" style="height: 500px; width: 500px; z-index: 0;"></div>

    if (CurrentUserId == charityEvent.ManagerId)
    {
        <MatButton Raised="true" class="btn btn-primary" @onclick="NavigateToEditEvent">Update event</MatButton>
    }
    <br>
    <br>
    <div style="float:left; width:40%">
        <p>Event volunteers:</p>
        <ol>
            @foreach (var volunteer in Volunteers)
            {
                <li>@volunteer</li>
            }
        </ol>
    </div>
    <div style="float:right; width:40%">
        <p>Event equipment:</p>
        <ol>
            @foreach (var equipment in Equipment)
            {
                <li>@equipment</li>
            }
        </ol>
    </div>
    <br />
    <br />
    <br />
    <h2 class="mat">charity event photos</h2>
    @foreach (var image in Images)
    {
        <img src=@image style="width:400px;height:400px">
    }
}
else
{
    <h1 class="mat">Sorry,but this event was not found</h1>
}

@code
{
    [Parameter]
    public Guid Id { get; set; }
    private CharityEvent charityEvent;
    private int totalLoadedTasks = 0;
    public string LoadingMessage = "Loading...";
    public string CurrentUserId { get; set; }
    public string WeatherForecast { get; set; } = "loading weather forecast";
    public int CurrentParticipants { get; set; } = 0;
    public int NeededParticipants { get; set; } = 0;
    public double ParticipantsProgress { get; set; } = 0;
    public List<string> Images = new List<string>();
    public List<string> Equipment = new List<string>() { "Loading..." };
    public List<string> Volunteers = new List<string>() { "Loading..." };
    private List<Thread> listOfThreads = new List<Thread>();

    protected override async Task OnInitializedAsync()
    {
        var karmaContext = new KarmaContext();
        charityEvent = karmaContext.Events.Where(p => p.Id == Id).FirstOrDefault();
        var principal = m_httpContextAccessor.HttpContext.User;
        CurrentUserId = principal.FindFirstValue(ClaimTypes.NameIdentifier);
        try
        {
            WeatherForecast = await m_weatherForecast.GetWeather(charityEvent.Address);
            var location = m_geocoder.Geocode(charityEvent.Address);
            var coords = location.Results[0].Geometry;
            await jsRuntime.InvokeVoidAsync("GetMap", coords.Latitude, coords.Longitude);
        }
        catch (InvalidAddressException ex)
        {
            m_notifactionTransmitter.ShowMessage("could not provide weather forecast:" + ex.Message, MatToastType.Danger);
            WeatherForecast = "failed";
        }

        listOfThreads.Add(new Thread(
            () =>
            {
            //Thread.Sleep(2000); //demonstation purposes
            GetImages();
            }));
        listOfThreads.Add(new Thread(
            () =>
            {
            //Thread.Sleep(3000);//demonstation purposes
            GetVolunteers();
            }));
        listOfThreads.Add(new Thread(
            () => { GetEquipment(); }));
        listOfThreads.Add(new Thread(
            () => { CalculateParticipants(); }));

        foreach (var thread in listOfThreads)
        {
            thread.Start();
        }
    }

    public void NavigateToEditEvent()
    {
        m_uriHelper.NavigateTo($"editcharityevent/{Id}");
    }

    private void GetImages()
    {
        var karmaContext = new KarmaContext();
        Images = karmaContext.EventImages
            .Where(p => p.EventId == Id)
            .Select(p => p.ImageUrl)
            .ToList();
        totalLoadedTasks++;
        LoadingMessage = totalLoadedTasks.ToString() + "/" + listOfThreads.Count();
        this.InvokeAsync(() => this.StateHasChanged());
        CheckThreads();
    }

    private void GetVolunteers()
    {
        var karmaContext = new KarmaContext();
        Volunteers = karmaContext.Events.Include(p => p.Volunteers).Where(p => p.Id == Id).Select(p => p.Volunteers).SelectMany(p => p).Select(p => $"{p.Name} {p.Surname}").ToList();
        totalLoadedTasks++;
        LoadingMessage = totalLoadedTasks.ToString() + "/" + listOfThreads.Count();
        this.InvokeAsync(() => this.StateHasChanged());
        CheckThreads();
    }

    private void GetEquipment()
    {
        var karmaContext = new KarmaContext();
        var eventEquipment = new List<string>();
        var vols = karmaContext.Events.Include(e => e.Volunteers).Where(x => x.Id == Id).FirstOrDefault().Volunteers;
        Equipment = karmaContext.SpecialEquipment.Where(x => vols.Contains(x.Owner)).Select(se => se.Name).ToList();
        totalLoadedTasks++;
        LoadingMessage = totalLoadedTasks.ToString() + "/" + listOfThreads.Count();
        this.InvokeAsync(() => this.StateHasChanged());
        CheckThreads();
    }

    private void CalculateParticipants()
    {
        var karmaContext = new KarmaContext();
        var ev = karmaContext.Events.Include(x => x.Volunteers).FirstOrDefault(y => y.Id == Id);
        CurrentParticipants = ev.Volunteers.Count;
        NeededParticipants = ev.MaxVolunteers;
        ParticipantsProgress = (double)CurrentParticipants / NeededParticipants;
        this.InvokeAsync(() => this.StateHasChanged());
        CheckThreads();
    }

    private void CheckThreads()
    {
        if (totalLoadedTasks == listOfThreads.Count && WeatherForecast != "failed")
        {
            LoadingMessage = "";
            this.InvokeAsync(() => this.StateHasChanged());
            m_notifactionTransmitter.ShowMessage("Loaded all elements of the event", MatToastType.Info);
        }
    }
}
