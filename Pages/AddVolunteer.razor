@page "/addvolunteer"
@using Karma.Models
@using Microsoft.EntityFrameworkCore;
@using System.Security.Claims
@inject IJSRuntime m_jsRuntime

<head>
    <link href="css/site.css" rel="stylesheet" />
</head>

<h1 class="mat" style="text-align:center">Add volunteer</h1>

<div class="box containter">
    <div class="centerContainer">
        <MatTextField @bind-Value="@VolunteerName" @oninput="@((e) => { VolunteerName = (string)e.Value; })" Label=" Volunteer Name" Outlined="false" Class="element"></MatTextField>
        <MatTextField @bind-Value="@VolunteerSurname" @oninput="@((e) => { VolunteerSurname = (string)e.Value; })" Label=" Volunteer Surname" Outlined="false" Class="element"></MatTextField>
        <MatButton Raised="true" class="btn btn-primary element" @onclick="AddThisVolunteer">Add volunteer</MatButton>
    </div>
</div>

<MatAccordion Multi="true">
    <MatExpansionPanel @bind-Expanded="@panelOpenState1">
        <MatExpansionPanelSummary>
            <MatExpansionPanelHeader>Charity events that this volunteer is working on</MatExpansionPanelHeader>
        </MatExpansionPanelSummary>
        <MatExpansionPanelDetails>
            <MatList>
                @if (GetEventsOfThisVolunteer() != null)
                {
                    @foreach (var charityEvent in GetEventsOfThisVolunteer())
                    {
                        <MatListItem style=" display: inline-block; width: 100%;">
                            <div style="float:left; margin: 0">
                                @charityEvent.Name
                            </div>
                            <div style="float:right">
                                <MatButton Outlined="true" class="btn btn-primary" @onclick="() => RemoveEventFromList(charityEvent.Id)">Remove</MatButton>
                            </div>
                        </MatListItem>
                    }
                }
            </MatList>
        </MatExpansionPanelDetails>
    </MatExpansionPanel>
    <MatExpansionPanel @bind-Expanded="@panelOpenState2">
        <MatExpansionPanelSummary>
            <MatExpansionPanelHeader>Charity events that this volunteer could be a part of:</MatExpansionPanelHeader>
        </MatExpansionPanelSummary>
        <MatExpansionPanelDetails>
            <MatList>
                @foreach (var charityEvent in GetEventsNotOfThisVolunteer())
                {
                    @if (listOfCharityEvents == null || !listOfCharityEvents.Contains(charityEvent))
                    {
                        <MatListItem style=" display: inline-block; width: 100%;">
                            <div style="float:left; margin: 0">
                                @charityEvent.Name
                            </div>
                            <div style="float:right">
                                @if (charityEvent.ManagerId == CurrentUserId)
                                {
                                    @if (charityEvent.Volunteers.Count < charityEvent.MaxVolunteers)
                                    {
                                        <MatButton Outlined="true" class="btn btn-primary" @onclick="() => AddEventToVolunteerList(charityEvent.Id)">Add</MatButton>
                                    }
                                }
                            </div>
                        </MatListItem>
                    }
                }
            </MatList>
        </MatExpansionPanelDetails>
    </MatExpansionPanel>
</MatAccordion>

@code
{
    string VolunteerName { get; set; }
    string VolunteerSurname { get; set; }
    private List<CharityEvent> listOfCharityEvents = new List<CharityEvent>();
    KarmaContext m_context = new KarmaContext();
    bool panelOpenState1 = true;
    bool panelOpenState2 = true;
    string CurrentUserId { get; set; }

    protected override void OnInitialized()
    {
        var principal = m_httpContextAccessor.HttpContext.User;
        CurrentUserId = principal.FindFirstValue(ClaimTypes.NameIdentifier);
    }

    private void AddThisVolunteer()
    {
        var vol = new Volunteer(name: VolunteerName, surname: VolunteerSurname, Guid.NewGuid(), listOfCharityEvents);
        if (ObjectChecker.IsAnyNullOrEmpty(vol))
        {
            m_notifactionTransmitter.ShowMessage("There are some empty fields", MatToastType.Danger);
        }
        else
        {
            m_context.Volunteers.Add(vol);
            m_context.SaveChanges();
            m_uriHelper.NavigateTo("/volunteers");
            m_notifactionTransmitter.ShowMessage("The volunteer has been added", MatToastType.Success);
        }
    }

    public IEnumerable<ICharityEvent> GetEventsOfThisVolunteer()
    {
        return listOfCharityEvents;
    }

    public IEnumerable<ICharityEvent> GetEventsNotOfThisVolunteer()
    {
        return m_context.Events.Include(p => p.Volunteers);
    }

    private void AddEventToVolunteerList(Guid id)
    {
        listOfCharityEvents.Add(m_context.Events.Where(p => p.Id == id).FirstOrDefault());
    }

    private void RemoveEventFromList(Guid id)
    {
        listOfCharityEvents.Remove(m_context.Events.Where(p => p.Id == id).FirstOrDefault());
    }
}
