@page "/volunteer/{Id:guid}"
@using System.Linq
@using Karma.Models
@using System.Text.RegularExpressions;
@using Microsoft.EntityFrameworkCore;
@using System.Security.Claims
@inject IJSRuntime m_jsRuntime
@inject AuthenticationStateProvider GetAuthenticationStateAsync

<head>
    <link href="css/site.css" rel="stylesheet" />
</head>

@if (volunteer != null)
{
    <h1 class="mat">Manage volunteer</h1>
    <div class="container leftAlign" style="width: 20%">
        <MatTextField @bind-Value="@volunteer.Name" @oninput="@((e) => { volunteer.Name = (string)e.Value; })" Label="Volunteer Name" Outlined="true" Class="element" Style=""></MatTextField>
        <MatTextField @bind-Value="@volunteer.Surname" @oninput="@((e) => { volunteer.Surname = (string)e.Value; })" Label="Volunteer Surname" Outlined="true" Class="element"></MatTextField>
    </div>
    <MatTextField @bind-Value="@FilterValue" OnInput="@(e => FilterValue = e.Value.ToString())" Label="Search Charity Events" Icon="search" IconTrailing="true"></MatTextField>
    <MatAccordion Multi="true">
        <MatExpansionPanel @bind-Expanded="@panelOpenState1">
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>Charity events that this volunteer is working on</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <MatList>
                    @foreach (var charityEvent in GetEventsOfThisVolunteer())
                    {
                        var regex = new Regex($"(.*){FilterValue}(.*)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                        var matches = regex.Matches(charityEvent.Name + charityEvent.Description);
                        @if (matches.Count > 0)
                        {
                            <MatListItem style=" display: inline-block; width: 100%;">
                                <div style="float:left">
                                    @charityEvent.Name
                                </div>
                                <div style="float:right">
                                    @if (charityEvent.ManagerId == CurrentUserId)
                                    {
                                        <MatButton Outlined="true" class="btn btn-primary" @onclick="() => RemoveEventFromList(charityEvent.Id)">Remove</MatButton>
                                    }
                                </div>
                            </MatListItem>

                        }
                    }
                </MatList>
            </MatExpansionPanelDetails>
        </MatExpansionPanel>

        <MatExpansionPanel @bind-Expanded="@panelOpenState2">
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>Charity events that this volunteer could be a part of</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <MatList>
                    @foreach (var charityEvent in GetEventsNotOfThisVolunteer())
                    {
                        var regex = new Regex($"(.*){FilterValue}(.*)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                        var matches = regex.Matches(charityEvent.Name + charityEvent.Description);
                        @if (matches.Count > 0)
                        {
                            <MatListItem style=" display: inline-block; width: 100%;">
                                <div style="float:left">
                                    @charityEvent.Name
                                </div>
                                <div style="float:right">
                                    @if (charityEvent.ManagerId == CurrentUserId)
                                    {
                                        @if (charityEvent.Volunteers.Count < charityEvent.MaxVolunteers)
                                        {
                                            <MatButton Outlined="true" class="btn btn-primary" @onclick="() => AddEventToVolunteerList(charityEvent.Id)">Add</MatButton>
                                        }
                                    }
                                </div>
                            </MatListItem>
                        }
                    }
                </MatList>
            </MatExpansionPanelDetails>
        </MatExpansionPanel>

        <MatExpansionPanel @bind-Expanded="@panelOpenState3">
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>Equipment that this volunteer has brought</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <MatList>
                    @foreach (var equipment in GetEquipmentOfThisVolunteer())
                    {
                        <MatListItem style=" display: inline-block; width: 100%;">
                            <div style="float:left">
                                @equipment.Name
                            </div>
                            <div style="float:right">
                                <MatButton Outlined="true" class="btn btn-primary" @onclick="() => RemoveEquipment(equipment.Id)">Remove</MatButton>
                            </div>
                        </MatListItem>
                    }
                </MatList>
            </MatExpansionPanelDetails>
        </MatExpansionPanel>
    </MatAccordion>
    <div class="container leftAlign" style="width:20%">
        <MatTextField @bind-Value="@EquipmentName" @oninput="@((e) => { EquipmentName = (string)e.Value; })" Label="Name of new equipment" Outlined="true" Class="element"></MatTextField>
        <MatButton Raised="true" class="btn btn-primary element" @onclick="AddNewEquipmentToVolunteer">Add this equipment</MatButton>
        <MatButton Raised="true" class="btn btn-primary element" @onclick="UpdateVolunteerData">Update volunteer data</MatButton>
    </div>
}
else
{
    <h1 class="mat">Sorry,but this volunteer was not found</h1>
}

@code
{
    [Parameter]
    public Guid Id { get; set; }
    private Volunteer volunteer;
    KarmaContext m_context = new KarmaContext();
    private string FilterValue { get; set; } = "";
    string CurrentUserId { get; set; }
    string EquipmentName { get; set; }
    bool panelOpenState1 = true;
    bool panelOpenState2 = true;
    bool panelOpenState3 = true;

    private void UpdateVolunteerData()
    {
        if (ObjectChecker.IsAnyNullOrEmpty(volunteer))
        {
            m_notifactionTransmitter.ShowMessage("There are some empty fields", MatToastType.Danger);
        }
        else
        {
            m_context.Volunteers.Update(volunteer);
            m_context.SaveChanges();
            m_uriHelper.NavigateTo("/volunteers");
            m_notifactionTransmitter.ShowMessage("The volunteer has been updated", MatToastType.Success);
        }
    }

    protected override void OnInitialized()
    {
        volunteer = m_context.Volunteers.Include(p => p.Events).Where(p => p.Id == Id).FirstOrDefault();
        var principal = m_httpContextAccessor.HttpContext.User;
        CurrentUserId = principal.FindFirstValue(ClaimTypes.NameIdentifier);
    }

    public IEnumerable<ICharityEvent> GetEventsOfThisVolunteer()
    {
        return m_context.Volunteers.Include(p => p.Events).Where(p => p.Id == Id).Select(p => p.Events).SelectMany(p => p);
    }

    public IEnumerable<ICharityEvent> GetEventsNotOfThisVolunteer()
    {
        return m_context.Events.Include(p => p.Volunteers).Where(p => !p.Volunteers.Contains(volunteer));
    }

    private void AddEventToVolunteerList(Guid id)
    {
        volunteer.Events.Add(m_context.Events.Where(p => p.Id == id).FirstOrDefault());
        m_context.SaveChanges();
    }

    private void RemoveEventFromList(Guid id)
    {
        volunteer.Events.Remove(m_context.Events.Where(p => p.Id == id).FirstOrDefault());
        m_context.SaveChanges();
    }

    public IEnumerable<ISpecialEquipment> GetEquipmentOfThisVolunteer()
    {
        return m_context.SpecialEquipment.Include(p => p.Owner).Where(p => p.Owner.Id == Id);
    }

    private void RemoveEquipment(Guid id)
    {
        m_context.Remove(m_context.SpecialEquipment.Where(p => p.Id == id).FirstOrDefault());
        m_context.SaveChanges();
    }

    private void AddNewEquipmentToVolunteer()
    {
        var equipment = new Karma.Models.SpecialEquipment(Guid.NewGuid(), EquipmentName, volunteer);
        m_context.SpecialEquipment.Add(equipment);
        EquipmentName = string.Empty;
        m_context.SaveChanges();
    }
}
