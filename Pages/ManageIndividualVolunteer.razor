@page "/volunteer/{Id:guid}"
@using System.Linq
@using Karma.Models
@using Microsoft.EntityFrameworkCore;
@using System.Security.Claims
@inject IJSRuntime m_jsRuntime
@inject AuthenticationStateProvider GetAuthenticationStateAsync

@if (m_httpContextAccessor.HttpContext.User.Identity.IsAuthenticated)
{
    @if (volunteer != null)
    {
        <h1>Manage volunteer</h1>

        <label for="fname">Volunteer name:</label>
        <input type="text" @bind="@volunteer.Name" @oninput="@((e) => { volunteer.Name = (string)e.Value; })" />
        <br>
        <br>
        <label for="fname">Volunteer surname:</label>
        <input type="text" @bind="@volunteer.Surname" @oninput="@((e) => { volunteer.Surname = (string)e.Value; })" />
        <br>
        <br>
        <br>
        <br>
        <table class="table">
            <tbody>
                <tr>
                    <th>Charity events that this volunteer is working on:</th>
                    <th>Actions:</th>
                </tr>
                @foreach (var charityEvent in GetEventsOfThisVolunteer())
                {
                    <tr>
                        <td>@charityEvent.Name</td>
                        <td>
                            @if (charityEvent.ManagerId == CurrentUserId)
                            {
                                <button class="btn btn-primary" @onclick="() => RemoveEventFromList(charityEvent.Id)">Remove</button>
                            }
                        </td>
                    </tr>
                }
                <tr>
                    <th>Charity events that this volunteer could be a part of:</th>
                    <th>Actions:</th>
                </tr>
                @foreach (var charityEvent in GetEventsNotOfThisVolunteer())
                {
                    <tr>
                        <td>@charityEvent.Name</td>
                        <td>
                            @if (charityEvent.ManagerId == CurrentUserId)
                            {
                                <button class="btn btn-primary" @onclick="() => AddEventToVolunteerList(charityEvent.Id)">Add</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <br>
        <br>
        <button class="btn btn-primary" @onclick="UpdateVolunteerData">Update volunteer data</button>
    }
    else
    {
        <h1>Sorry,but this volunteer was not found</h1>
    }
}
else
{
    <label for="fname">Please LogIn</label>
}

@code
{
    [Parameter]
    public Guid Id { get; set; }
    private Volunteer volunteer;
    KarmaContext m_context = new KarmaContext();
    string CurrentUserId { get; set; }

    private async Task UpdateVolunteerData()
    {
        m_context.Volunteers.Update(volunteer);
        m_context.SaveChanges();
        m_uriHelper.NavigateTo("/volunteers");
        await m_jsRuntime.InvokeVoidAsync("alert", "The volunteer data has been updated");
    }
    protected override void OnInitialized()
    {
        volunteer = m_context.Volunteers.Include(p => p.Events).Where(p => p.Id == Id).FirstOrDefault();
        var principal = m_httpContextAccessor.HttpContext.User;
        CurrentUserId = principal.FindFirstValue(ClaimTypes.NameIdentifier);
    }

    public IEnumerable<ICharityEvent> GetEventsOfThisVolunteer()
    {
        return m_context.Volunteers.Include(p => p.Events).Where(p => p.Id == Id).Select(p => p.Events).SelectMany(p => p);
    }

    public IEnumerable<ICharityEvent> GetEventsNotOfThisVolunteer()
    {
        return m_context.Events.Include(p => p.Volunteers).Where(p => !p.Volunteers.Contains(volunteer));
    }

    private void AddEventToVolunteerList(Guid id)
    {
        volunteer.Events.Add(m_context.Events.Where(p => p.Id == id).FirstOrDefault());
        m_context.SaveChanges();
    }

    private void RemoveEventFromList(Guid id)
    {
        volunteer.Events.Remove(m_context.Events.Where(p => p.Id == id).FirstOrDefault());
        m_context.SaveChanges();
    }
}
